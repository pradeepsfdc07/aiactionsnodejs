openapi: 3.0.1
info:
  title: Mock Salesforce Object API
  version: 1.0.0
  description: Simple API for testing Salesforce-style object operations with dynamic tablename

servers:
  - url: https://aiactionsnodejs.onrender.com

paths:
  /get-records:
    post:
      summary: Get records by text filter
      operationId: getRecords
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tablename
                - filter
              properties:
                tablename:
                  type: string
                  example: "contact"
                filter:
                  type: string
                  example: "john"
      responses:
        "200":
          description: List of matching records
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordsResponse"
        "400":
          description: Missing or invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /add-record:
    post:
      summary: Add a new record
      operationId: addRecord
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddRecordRequest"
      responses:
        "201":
          description: Record added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddResponse"
        "400":
          description: Missing fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /update-record:
    put:
      summary: Update a record by ID
      operationId: updateRecord
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRecordRequest"
      responses:
        "200":
          description: Record updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /delete-record:
    delete:
      summary: Delete a record by ID
      operationId: deleteRecord
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tablename
                - Id
              properties:
                tablename:
                  type: string
                  example: "contact"
                Id:
                  type: string
                  example: "002"
      responses:
        "200":
          description: Record deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
        "400":
          description: Invalid request (missing Id or tablename)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    Record:
      type: object
      properties:
        Id:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Email:
          type: string

    RecordsResponse:
      type: object
      properties:
        count:
          type: integer
        records:
          type: array
          items:
            $ref: "#/components/schemas/Record"
        message:
          type: string

    AddRecordRequest:
      type: object
      required:
        - tablename
        - FirstName
        - LastName
        - Email
      properties:
        tablename:
          type: string
          example: "lead"
        FirstName:
          type: string
        LastName:
          type: string
        Email:
          type: string

    AddResponse:
      type: object
      properties:
        message:
          type: string
        record:
          $ref: "#/components/schemas/Record"

    UpdateRecordRequest:
      type: object
      required:
        - tablename
        - Id
      properties:
        tablename:
          type: string
        Id:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Email:
          type: string

    UpdateResponse:
      type: object
      properties:
        message:
          type: string
        record:
          $ref: "#/components/schemas/Record"

    DeleteResponse:
      type: object
      properties:
        message:
          type: string
        deleted:
          $ref: "#/components/schemas/Record"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
